#Notes

1. decorater in python turns function into a path operation

A "path" is also commonly called an "endpoint" or a "route".



@app.get("/")

get    -> method
root() -> function
("/")  ->  path -> root url
@      ->  decorator
Then we reference our fastapi instance app -> @app


2. retreving data - use GET operation

3. If two paths are same, Fastapi will return first match, 
    Request comes in with path and what request.(Ex: Get and ('/') )


4. retreving POST Data

    async def create_posts(payload: dict = Body(...)):
    print(payload)


5. We can use Pydantic to define how our schema looks like. pydantic - validation

async def create_postsv2(new_post: Post): new_post will be saved as pydantic model. 

Convert pydantic to dict -> print(new_post.dict())



#naming conventions

CRUD

Create - Use POST
6. Use plural - (/posts,/users)

Read/Retreving - Use GET
7. (/posts) - Get All posts
8. app.get("/posts/{id}") - Get specific posts

Update - Use - PUT/PATCH - Difference is when you use PUT you have to send all details,
                           PATCH - Send Only field that require changes

9. app.put("/posts/{id}") - update post


Delete - Use DELETE

10. app.delete("/posts/{id}") - delete post



11. @app.get("/posts/{id}")  -> {id} -> path parameter



12. Path parameter - will be returned as a string


#uvicorn

uvicorn main:app                   - run the app(main - file name, app is app)
uvicorn main:app --reload          - reload the server if any code changes